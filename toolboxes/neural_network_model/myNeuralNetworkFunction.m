% % nnstart
% 
% inp=[sigma_all;beta_all;Y_all(:)'];
% 
% 
% number_time_points=33;
% d_D = reshape(d_D,[1,GP_number*number_time_points]);
% d_eps_p1 = reshape(d_eps_p1,[6,GP_number*number_time_points]);
% d_alpha1 = reshape(d_alpha1,[6,GP_number*number_time_points]);
% 
% out =[d_eps_p1;d_alpha1;d_D];
% 
% 
% [Y] = myNeuralNetworkFunction(inp);

function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
    %MYNEURALNETWORKFUNCTION neural network simulation function.
    %
    % Auto-generated by MATLAB, 12-Sep-2018 13:18:29.
    %
    % [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
    %
    %   X = 1xTS cell, 1 inputs over TS timesteps
    %   Each X{1,ts} = 13xQ matrix, input #1 at timestep ts.
    %
    % and returns:
    %   Y = 1xTS cell of 1 outputs over TS timesteps.
    %   Each Y{1,ts} = 13xQ matrix, output #1 at timestep ts.
    %
    % where Q is number of samples (or series) and TS is the number of timesteps.
    
    %#ok<*RPMT0>
    
    % ===== NEURAL NETWORK CONSTANTS =====
    
    % Input 1
    x1_step1.keep = [1 2 3 4 5 6 13];
    x1_step2.xoffset = [-40.9377739580823;-11.9302022992106;-191.548966159169;-6.19162858097769;-70.9905577915319;-4.8651973344735;0];
    x1_step2.gain = [0.0244273174458371;0.0838208753648857;0.00522059721882832;0.161508395880247;0.0140863803738035;0.205541508648429;15.7101228780492];
    x1_step2.ymin = -1;
    
    % Layer 1
    b1 = [0.29972908813255522142;-2.7629890864386053018;0.25749772128555609152;-0.018615212322396552935;-0.23675245622659910061;-0.50903418394046529016;-0.0049507975411653927164;-0.28874807032684030039;0.49872975366893984583;1.2685929870879728565];
    IW1_1 = [-0.2773480281143234083 0.15495405863062791663 0.22210857278713180829 -0.19822824842772310272 -0.5264559366031816845 0.20119825424599258046 0.26436732917500171958;0.094573843885221081651 0.096941134318012475712 3.1005893662866110816 -0.04684229199760586021 -0.20057097877992602353 0.17346802809824946046 -0.18895825182070272175;-0.33435031356257322033 0.18467801188617322117 0.40884657503688082159 0.039059095619136084687 0.26828620741103276215 -0.099136130389084975434 0.2398523666429008272;-0.024880505150056145269 -0.24777876962710104758 0.83763892426528196999 -0.14318091564898180468 0.20484717685903761075 -0.31210480367684445557 0.45315350659373815345;0.17492621829132035116 0.044583751742095528714 -0.012462154116669614534 -0.2530234141744030496 0.41077740306575655227 -0.25863391719839179395 -0.27274422245091289874;0.01957928501727876705 -0.14246300923930454996 -0.76788092572530519675 0.056861376569805457959 0.10748696641812954811 -0.18267235770373382864 -0.47371930917513349613;0.036692933956305504029 -0.083483306755940470123 -0.2583420375108256839 0.033529860543876327528 0.068654740924969870353 0.12154642704059327729 0.10889754173303792251;-0.17175835096362487842 0.0090398492781986767436 0.41127471138568250097 -0.1574641548994515361 0.28438568483999032699 -0.02839758649954170211 -0.22312121004456128559;0.44221319559346300432 -0.079732403655788056107 0.51643726348489016331 0.03939913010124658499 -0.0536716989078216411 0.30121440888206069131 0.59419872110466642745;-1.2528864406253730213 0.29221372183158061953 1.7945799449228250211 0.11043106056227211531 -0.31964780011076610045 -0.21628852546783064459 -1.3606856519516112858];
    
    % Layer 2
    b2 = [0.55054698820952219229;-0.3799995664943524587;0.67967992188409254162;-0.10020607749703784595;0.20838241132286408619;0.76876035233382356004;0.011897232527996629697;-0.071292446143744872544;0.23383063325743164151;0.24754013357766993519;0.14779309555806605103;-1.1616461853968875761;-0.5826539688375887982];
    LW2_1 = [-0.76054903509412874474 0.97654845115363964059 -0.94121815860838586865 -0.42086784098982532587 1.0312649402191031989 -1.0188632774219033017 -0.89298907493192403173 -1.0644637760287287698 0.3919499257887367194 0.066381194463943235529;0.70917227164140972384 0.43717940759570489417 1.5381392752151594738 -0.94869716449222096788 0.73976217916091435711 1.2308221942489867562 -1.4965625712738648279 -0.5109370516922305816 1.1721661157404188458 0.24536139374417828551;-1.0191736332925123154 0.60904606947489692281 -1.0611612869566602324 0.23945167003889494817 -0.60136612931714539254 -1.962726873037935027 -0.9648165368027451505 0.74622606979449879194 -0.75773386535086306726 -0.09928668785925076623;-1.94608437393371414 0.16910695999072400397 0.3574946621195897456 -0.39230237699771824955 -1.9042180321891244432 -0.58342151759735627614 -1.4526220817973880539 -0.42872903636015541329 -0.22658446903603279843 0.02861960498138913303;-0.53675915536449447796 0.1653836654031087261 1.0878372202296002769 -0.31254134544432055076 0.59154920525024345945 0.19209138645078757679 1.867896085891289415 0.75530877951632269252 0.38106152702978546287 0.078884489507186406065;0.16200798486457138048 0.85614016866559128349 -0.47455242723136659144 -1.1785434394084302046 -0.8388545646835339209 -0.16960195173396697133 2.2202697665038595431 2.3511921808387885591 0.7847202169816367423 0.066507574847343320368;0.16884870977954904991 -0.43259374161835073558 -0.23634102361399247916 0.10673463445723438414 0.11376482158998292571 -0.017579892621413604342 0.11167655828988924671 0.14468007682272543413 -0.057764670599227553593 -0.36292721572025837817;0.09300991295635285816 -0.55767982552210204616 -0.21779603591224069858 0.11755602481131514903 0.053893996012217747216 -0.037096797060214445341 0.070726602121092080333 0.15734708291370322342 -0.076629599160133690661 -0.42649888656779705309;0.072729124655022944768 0.6527317783109624072 0.18626960654077423518 -0.089729618820460599338 0.055948590827513265678 0.23678094891462056482 -0.096001298952886837679 -0.054372812421984315079 0.1517973902437386724 0.36990273514763155616;0.37347137564388371844 0.79551355075468377365 0.012086568161105265204 0.27068483817648436585 -0.21345217351127199201 0.78013759278561933819 -0.81376326078391481023 0.24557785347222171879 0.59463712103499721806 0.5535796256223178835;0.30563671216362076066 -0.26434216398199522624 0.060362210783130837433 0.12205915888752670584 0.19891022827764673342 0.61390054613802058636 -0.3754051177941450379 0.30696236426897249849 0.2576811426868935162 -0.34035874989576964111;0.82491384056760197474 -0.3968142274784002832 -0.67900437437136662577 0.10363299562158129197 0.38342916336881488482 0.15368892311191545419 -0.54068719206088711182 0.89472664363495402196 0.60050903391467969072 0.57222765913537487759;-0.62167615945165766167 -0.14859385261612736984 0.19352617762694293568 -0.5096132231866702389 -0.32892711370866445364 0.75974553923503840291 0.5375581631595918175 1.0152666770961507048 0.50162168535482498655 -0.39398525033049514033];
    
    % Output 1
    y1_step1.ymin = -1;
    y1_step1.gain = [0.0244305122748246;0.0371671995824776;0.00633862982324634;0.131540551061777;0.0155524551596854;0.210611979220322;0.873406664706161;0.82654386682688;0.427121558476339;12.3361460313675;1.14332089645557;18.5680130335584;23.2670270972698];
    y1_step1.xoffset = [-40.931659598439;-26.2170978599252;-157.744405599524;-7.88973628472813;-62.8696517852061;-4.74117696799233;-1.17164814476902;-1.20764536446395;-2.32183802624128;-0.072541207418267;-0.882252283423244;-0.0382186021790659;1.00230033647828e-44];
    
    % ===== SIMULATION ========
    
    % Format Input Arguments
    isCellX = iscell(X);
    if ~isCellX
        X = {X};
    end
    
    % Dimensions
    TS = size(X,2); % timesteps
    if ~isempty(X)
        Q = size(X{1},2); % samples/series
    else
        Q = 0;
    end
    
    % Allocate Outputs
    Y = cell(1,TS);
    
    % Time loop
    for ts=1:TS
        
        % Input 1
        temp = removeconstantrows_apply(X{1,ts},x1_step1);
        Xp1 = mapminmax_apply(temp,x1_step2);
        
        % Layer 1
        a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
        
        % Layer 2
        a2 = repmat(b2,1,Q) + LW2_1*a1;
        
        % Output 1
        Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    end
    
    % Final Delay States
    Xf = cell(1,0);
    Af = cell(2,0);
    
    % Format Output Arguments
    if ~isCellX
        Y = cell2mat(Y);
    end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
    y = bsxfun(@minus,x,settings.xoffset);
    y = bsxfun(@times,y,settings.gain);
    y = bsxfun(@plus,y,settings.ymin);
end

% Remove Constants Input Processing Function
function y = removeconstantrows_apply(x,settings)
    y = x(settings.keep,:);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
    a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
    x = bsxfun(@minus,y,settings.ymin);
    x = bsxfun(@rdivide,x,settings.gain);
    x = bsxfun(@plus,x,settings.xoffset);
end
